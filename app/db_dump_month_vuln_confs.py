#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Give the CVE's of a specific month
#
# Software is free software released under the "Modified BSD license"
#
# Copyright (c) 2015      Pieter-Jan Moreels

import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, "./lib/"))

import pymongo

import calendar
from datetime import datetime
from datetime import date
from dateutil.relativedelta import relativedelta
import time
import argparse
import re

from Config import Configuration

argParser = argparse.ArgumentParser(description="Dump CVE's for a secific month. Default is one month back, print one month")
argParser.add_argument('-n', type=int, help='Amount of months to print', default=1)
argParser.add_argument('-s', type=int, help='Number of months back in past', default=1)
argParser.add_argument('-o', type=str, help='Output file')
argParser.add_argument('-e', type=str, help='Specify a list of CVEs to exclude from the output')
argParser.add_argument('-b', action='store_true', help='Add blacklisted items')
args = argParser.parse_args()

if not args.o:
    sys.exit('Please select an output file')

# variables and connections
db = Configuration.getMongoConnection()
col = db.cves
# get dates
today = datetime.now()
first = date(today.year, today.month, 1) + relativedelta( months = -args.s )
last = date(first.year, first.month, calendar.monthrange(first.year,first.month)[1])
last = last + relativedelta( months = +(args.n-1) )
first = time.strftime('%Y-%m-%d', first.timetuple())
last = time.strftime('%Y-%m-%d', last.timetuple())

query = [{'Modified': {'$gt':first, '$lt':last}}]
# exclude blacklist
if not args.b:
    bl = db.mgmt_blacklist
    regexes = bl.distinct('id')
    if len(regexes) != 0:
        exp = "^(?!" + "|".join(regexes) + ")";
        query.append({'vulnerable_configuration': re.compile(exp)})

# get cves
if len(query) == 1:
    cves = list(col.find(query[0]).sort("Modified", -1))
else:
    cves = list(col.find({'$and':query}).sort("Modified", -1))

# exclude cves
if args.e:
    excl = [(i.lower()).strip() for i in open(args.e)]
    result = [cve for cve in cves if cve['id'].lower() not in excl]
    cves=result

# write to file
if os.path.exists(args.o):
    os.remove(args.o)
output = open(args.o, "a")
for cve in cves:
    vulns = [vuln for vuln in cve['vulnerable_configuration'] if re.match(exp, vuln)]
    output.write("%s (%s) - %s\n" % (cve['id'], cve['Modified'].split("T")[0], vulns[0]))
print("Collection of CVE's from %s to %s exported." %(first,last))
print("%i cve's saved to %s" %(len(cves), args.o))
