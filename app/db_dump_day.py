#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Give the CVE's of a specific month
#
# Software is free software released under the "Modified BSD license"
#
# Copyright (c) 2015      Pieter-Jan Moreels

import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, "./lib/"))

import pymongo

import calendar
from datetime import datetime
from datetime import date
from dateutil.relativedelta import relativedelta
import time
import argparse
import re

from Config import Configuration

argParser = argparse.ArgumentParser(description="Dump CVE's for a secific day. Default is today")
argParser.add_argument('-n', type=int, help='Amount of days to print', default=1)
argParser.add_argument('-s', type=int, help='Number of day back in past', default=0)
argParser.add_argument('-o', type=str, help='Output file')
argParser.add_argument('-g', action='store_true', help='Group CVEs by CPE')
argParser.add_argument('-e', type=str, help='Specify a list of CVEs to exclude from the output')
argParser.add_argument('-b', action='store_true', help='Add blacklisted items')
args = argParser.parse_args()

if not args.o:
  sys.exit('Please select an output file')

# variables and connections
db = Configuration.getMongoConnection()
col = db.cves
# get dates
today = datetime.now()
first = today + relativedelta( days = -args.s )
last = first + relativedelta( days = +args.n )
first = time.strftime('%Y-%m-%d', first.timetuple())
last = time.strftime('%Y-%m-%d', last.timetuple())

query = [{'Modified': {'$gt':first, '$lt':last}}]
# exclude blacklist
if not args.b:
  bl = db.mgmt_blacklist
  regexes = bl.distinct('id')
  if len(regexes) != 0:
    exp = "^(?!" + "|".join(regexes) + ")";
    query.append({'$or':[{'vulnerable_configuration': re.compile(exp) },
                         {'vulnerable_configuration':{'$exists': False}}, 
                         {'vulnerable_configuration': []}
                        ]})

# get cves
if len(query) == 1:
  cves = list(col.find(query[0]).sort("Modified", -1))
else:
  cves = list(col.find({'$and':query}).sort("Modified", -1))

# exclude cves
if args.e:
  excl = [(i.lower()).strip() for i in open(args.e)]
  result = [cve for cve in cves if cve['id'].lower() not in excl]
  cves=result

if args.g:
  control=[]
  for i, c in enumerate(cves):
    if c in control:
      continue
    control.append(c)
    group=[c]
    r=list(cves[i:])
    r.pop(0)
    compa=(group[0])['vulnerable_configuration']
    for x in r:
      compb=x['vulnerable_configuration']
      if set(compa)==set(compb):
        group.append(x)
        control.append(x)
    if len(c['vulnerable_configuration'])>0:
      output = open(args.o, "a")
      output.write("Vulnerabilities for %s:\n"%(c['vulnerable_configuration'][0]))
      for i in group:
        output.write("%s\n"%(i['id']))
else:
  # write to file
  output = open(args.o, "a")
  for cve in cves:
    output.write("%s (%s) - %s\n" % (cve['id'], cve['Modified'].split("T")[0], cve['summary']))
print("Collection of CVE's from %s to %s exported." %(first,last))
print("%i cve's saved to %s" %( len(cves), args.o))
