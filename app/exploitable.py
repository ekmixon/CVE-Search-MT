#!/usr/bin/env python3.3
# -*- coding: utf8 -*-
#
# Get a list of the exploitability of cves

# Copyright (c) 2015	NorthernSec
# Copyright (c)	2015	Pieter-Jan Moreels
# This software is licensed under the Original BSD License

# Imports
import argparse
import csv
import json
import sys
import time

from urllib.request import urlopen

# Parameters
host="127.0.0.1"
port=5000

# Progress bar
def progressbar(it, prefix="Building List ", size=50):
    count = len(it)
    def _show(_i):
        if count != 0 and sys.stdout.isatty():
            x = int(size * _i / count)
            sys.stdout.write("%s[%s%s] %i/%i\r" % (prefix, "#" * x, " " * (size - x), _i, count))
            sys.stdout.flush()
    _show(0)
    for i, item in enumerate(it):
        yield item
        _show(i + 1)
    sys.stdout.write("\n")
    sys.stdout.flush()

# args
description='''Generates a csv of exploitability of cves'''
parser = argparse.ArgumentParser(description=description)
parser.add_argument('cves',  metavar='cve-list', type=str, help='List of CVEs' )
args = parser.parse_args()

cves=[x.strip() for x in open(args.cves,"r")]
csvdata=[["CVE","CVSS","Exploit-db","Metasploit, Impact C, Impact I, Impact A"]]

csvFile = f"exploitability-{int(round(time.time()))}.csv"
with open(csvFile,'w',newline='') as fp:
    out=csv.writer(fp,delimiter=",")
    failedLines=[]
    for j, cveID in enumerate(progressbar(cves)):
        print(cveID)
        try:
            data = (
                urlopen(f'http://{host}:{port}/api/cve/{cveID.upper()}')
                .read()
                .decode('utf8')
            )

            cve =json.loads(str(data))
            if not cve:
              failedLines.append("Line %s: \t%s - Unknown CVE"%(j, cveID))
              continue
            exploitdb="yes" if 'map_cve_exploitdb' in cve else "no"
            msf="yes" if 'map_cve_msf' in cve else "no"
            c=cve["impact"]["confidentiality"] if "impact" in cve else ""
            i=cve["impact"]["integrity"] if "impact" in cve else ""
            a=cve["impact"]["availability"] if "impact" in cve else ""
            csvdata.append([cveID.upper(), cve["cvss"], exploitdb, msf, c.lower(), i.lower(), a.lower()])
        except Exception as e:
          failedLines.append("Line %s: \t%s - %s"%(j, cveID, e))
    out.writerows(csvdata)

print("\n".join(failedLines))
